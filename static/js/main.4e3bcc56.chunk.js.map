{"version":3,"sources":["components/chart/Chart.js","components/point-form/PointForm.js","components/data-form/DataForm.js","App.js","reportWebVitals.js","index.js"],"names":["defaults","animation","Chart","series","useState","seriesData","setSeriesData","useEffect","labels","data","forEach","point","push","x","y","datasets","backgroundColor","className","options","plugins","title","display","text","legend","PointForm","onAddPoint","setX","setY","type","onChange","event","target","value","onClick","DataForm","onSeriesChange","setSeries","error","setError","undefined","errorTime","setErrorTime","length","pop","onError","message","a","clearTimeout","setTimeout","concat","slice","map","p","index","App","new_series","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e3bcc56.chunk.js","sourcesContent":["\n// React\nimport React, {useEffect, useState} from 'react';\n\n// ChartJS\nimport { Bar, Scatter, defaults } from \"react-chartjs-2\";\n\n// Styles\nimport './Chart.css'\n\n\n// Animation is causing troubles\ndefaults.animation = false;\n\nconst Chart = ({ series }) => {\n\n  const [seriesData, setSeriesData] = useState({});\n\n  // Convert data to ChartJS format\n  useEffect(() => {\n    const labels = [];\n    const data = [];\n    series.forEach(point => {\n      labels.push(point.x);\n      data.push(point.y);\n    });\n    setSeriesData({\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: [\n          '#95ca3e',\n          'rgb(18, 31, 61)',\n        ],\n      }],\n    });\n  }, [series])\n\n  return (\n    <div className=\"Chart\">\n\n      {/* Bars Chart */}\n      <div className=\"chart\">\n        <Bar\n          // redraw={true}\n          data={seriesData}\n          options={{\n            plugins: {\n              title: {\n                display: true,\n                text: \"Barras\"\n              },\n              legend: {\n                display: false,\n              }\n            }\n          }}\n        />\n      </div>\n\n      {/* Scatter Chart */}\n      <div className=\"chart\">\n        <Scatter\n          data={seriesData}\n          options={{\n            plugins: {\n              title: {\n                display: true,\n                text: \"Puntos\"\n              },\n              legend: {\n                display: false,\n              }\n            }\n          }}\n        />\n      </div>\n\n    </div>\n  );\n}\n\nexport default Chart;","\n// React\nimport React, { useState } from 'react';\n\n// Styles\nimport './PointForm.css'\n\n\nconst PointForm = ({ onAddPoint }) => {\n\n  const [x, setX] = useState(0.0);\n  const [y, setY] = useState(0.0);\n\n  return (\n    <div className=\"PointForm\">\n      <div className=\"point\">\n        <p>X:</p>\n        <input type=\"number\" onChange={event => setX(event.target.value)}/>\n      </div>\n      <div className=\"point\">\n        <p>Y:</p>\n        <input type=\"number\" onChange={event => setY(event.target.value)}/>\n      </div>\n      <button onClick={() => onAddPoint({x: x, y: y})}>\n        Agregar\n      </button>\n    </div>\n  )\n}\n\nexport default PointForm;\n","\n// React\nimport React, { useEffect, useState } from 'react';\n\n// Components\nimport PointForm from '../point-form/PointForm';\n\n// Styles\nimport './DataForm.css'\n\n\nconst DataForm = ({ onSeriesChange }) => {\n\n  const [series, setSeries] = useState([]);\n  const [error, setError] = useState('');\n  const [errorTime, setErrorTime] = useState(undefined);\n\n  useEffect(() => {\n    if ( series.length > 5 ) {\n      series.pop();\n      onError('No puedes agregar mas de 5 puntos.');\n    }\n    else {\n      onSeriesChange(series)\n    }\n  }, [series]);\n\n  const clearSeries = () => {\n    setError('');\n    setSeries([]);\n  }\n\n  async function onError ( message ) {\n    setError(message);\n    clearTimeout(errorTime);\n    setErrorTime(setTimeout(() => {setError('')}, 4000));\n  }\n\n  return (\n    <div className=\"DataForm\">\n      <p className=\"text\">Ac√° puedes introducir los datos :)</p>\n      <div className=\"inline\">\n        <PointForm\n          onAddPoint={(point) => { setSeries( series.concat(point) ) }}\n        />\n        <p className=\"error\">{error}</p>\n      </div>\n      <div className=\"inline\">\n        <p className=\"text\">\n          Tu serie de datos es: \n          { series.slice(0,5).map( (p, index) => <span className=\"data-point\" key={index}>({p.x},{p.y})</span> ) }\n        </p>\n        <button className=\"clear-all\" onClick={clearSeries}>Borrar todo</button>\n      </div>\n    </div>\n  )\n}\n\nexport default DataForm;\n","\n// React\nimport React, {useState, useEffect} from 'react';\n\n// Components\nimport Chart from './components/chart/Chart';\nimport DataForm from './components/data-form/DataForm';\n\n// Styles\nimport './App.css';\n\n\nfunction App() {\n\n  const [series, setSeries] = useState([]);\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"header wrapper\">\n        <h1 className=\"title--green\">Graphic calculator</h1>\n        <h2 className=\"subtitle--green\">Platzi Master assessment</h2>\n      </div>\n\n      <div className=\"data-form-wrapper wrapper\">\n        <DataForm\n          onSeriesChange={new_series => setSeries(new_series)}\n        />\n      </div>\n\n      <div className=\"chart-wrapper wrapper\">\n        <Chart \n          series={series}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}